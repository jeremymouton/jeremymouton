/*!
 * Project: jeremymouton.com
 * Author: Jeremy Mouton
 */
/*
 * Components
 *
 */
/* Bootstrap */
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
@import url("//fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Open+Sans:400italic,400,300,600");
html {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
}
body {
  margin: 0;
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}
audio,
canvas,
progress,
video {
  display: inline-block;
  vertical-align: baseline;
}
audio:not([controls]) {
  display: none;
  height: 0;
}
[hidden],
template {
  display: none;
}
a {
  background-color: transparent;
}
a:active,
a:hover {
  outline: 0;
}
abbr[title] {
  border-bottom: 1px dotted;
}
b,
strong {
  font-weight: bold;
}
dfn {
  font-style: italic;
}
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}
mark {
  background: #ff0;
  color: #000;
}
small {
  font-size: 80%;
}
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sup {
  top: -0.5em;
}
sub {
  bottom: -0.25em;
}
img {
  border: 0;
}
svg:not(:root) {
  overflow: hidden;
}
figure {
  margin: 1em 40px;
}
hr {
  box-sizing: content-box;
  height: 0;
}
pre {
  overflow: auto;
}
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  font: inherit;
  margin: 0;
}
button {
  overflow: visible;
}
button,
select {
  text-transform: none;
}
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  cursor: pointer;
}
button[disabled],
html input[disabled] {
  cursor: default;
}
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}
input {
  line-height: normal;
}
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  padding: 0;
}
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}
input[type="search"] {
  -webkit-appearance: textfield;
  box-sizing: content-box;
}
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}
legend {
  border: 0;
  padding: 0;
}
textarea {
  overflow: auto;
}
optgroup {
  font-weight: bold;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
td,
th {
  padding: 0;
}
/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */
@media print {
  *,
  *:before,
  *:after {
    background: transparent !important;
    color: #000 !important;
    box-shadow: none !important;
    text-shadow: none !important;
  }
  a,
  a:visited {
    text-decoration: underline;
  }
  a[href]:after {
    content: " (" attr(href) ")";
  }
  abbr[title]:after {
    content: " (" attr(title) ")";
  }
  a[href^="#"]:after,
  a[href^="javascript:"]:after {
    content: "";
  }
  pre,
  blockquote {
    border: 1px solid #999;
    page-break-inside: avoid;
  }
  thead {
    display: table-header-group;
  }
  tr,
  img {
    page-break-inside: avoid;
  }
  img {
    max-width: 100% !important;
  }
  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3;
  }
  h2,
  h3 {
    page-break-after: avoid;
  }
  .navbar {
    display: none;
  }
  .btn > .caret,
  .dropup > .btn > .caret {
    border-top-color: #000 !important;
  }
  .label {
    border: 1px solid #000;
  }
  .table {
    border-collapse: collapse !important;
  }
  .table td,
  .table th {
    background-color: #fff !important;
  }
  .table-bordered th,
  .table-bordered td {
    border: 1px solid #ddd !important;
  }
}
.container {
  margin-right: auto;
  margin-left: auto;
  padding-left: 15px;
  padding-right: 15px;
}
.container:before,
.container:after,
.container-fluid:before,
.container-fluid:after,
.row:before,
.row:after,
blog-posts:before,
blog-posts:after,
.post-aside ul:before,
.post-aside ul:after,
.container:before,
.container:after {
  content: " ";
  display: table;
}
.container:after,
.container-fluid:after,
.row:after,
blog-posts:after,
.post-aside ul:after,
.container:after {
  clear: both;
}
/* Prism */
/**
* xonokai theme for JavaScript, CSS and HTML
* based on: https://github.com/MoOx/sass-prism-theme-base by Maxime Thirouin ~ MoOx --> http://moox.fr/ , which is Loosely based on Monokai textmate theme by http://www.monokai.nl/
* license: MIT; http://moox.mit-license.org/
*/
code[class*="language-"],
pre[class*="language-"] {
    -moz-tab-size: 2;
    -o-tab-size: 2;
    tab-size: 2;
    -webkit-hyphens: none;
    -moz-hyphens: none;
    -ms-hyphens: none;
    hyphens: none;
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: normal;
    font-family: Menlo, Monaco, "Courier New", monospace;
    font-size: 0.875rem;
    color: #76d9e6;
    text-shadow: none;
}
pre[class*="language-"],
:not(pre)>code[class*="language-"] {
    background: #2a2a2a;
}
pre[class*="language-"] {
    padding: 15px;
    border-radius: 4px;
    border: 1px solid #e1e1e8;
    overflow: auto;
}

pre[class*="language-"] {
    position: relative;
}
pre[class*="language-"] code {
    white-space: pre;
    display: block;
}

:not(pre)>code[class*="language-"] {
    padding: 0.15em 0.2em 0.05em;
    border-radius: .3em;
    border: 0.13em solid #7a6652;
    box-shadow: 1px 1px 0.3em -0.1em #000 inset;
}
.token.namespace {
    opacity: .7;
}
.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
    color: #6f705e;
}
.token.operator,
.token.boolean,
.token.number {
    color: #a77afe;
}
.token.attr-name,
.token.string {
    color: #e6d06c;
}
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string {
    color: #e6d06c;
}
.token.selector,
.token.inserted {
    color: #a6e22d;
}
.token.atrule,
.token.attr-value,
.token.keyword,
.token.important,
.token.deleted {
    color: #ef3b7d;
}
.token.regex,
.token.statement {
    color: #76d9e6;
}
.token.placeholder,
.token.variable {
    color: #fff;
}
.token.important,
.token.statement,
.token.bold {
    font-weight: bold;
}
.token.punctuation {
    color: #bebec5;
}
.token.entity {
    cursor: help;
}
.token.italic {
    font-style: italic;
}

code.language-markup {
    color: #f9f9f9;
}
code.language-markup .token.tag {
    color: #ef3b7d;
}
code.language-markup .token.attr-name {
    color: #a6e22d;
}
code.language-markup .token.attr-value {
    color: #e6d06c;
}
code.language-markup .token.style,
code.language-markup .token.script {
    color: #76d9e6;
}
code.language-markup .token.script .token.keyword {
    color: #76d9e6;
}

/* Line highlight plugin */
pre[class*="language-"][data-line] {
    position: relative;
    padding: 1em 0 1em 3em;
}
pre[data-line] .line-highlight {
    position: absolute;
    left: 0;
    right: 0;
    padding: 0;
    margin-top: 1em;
    background: rgba(255, 255, 255, 0.08);
    pointer-events: none;
    line-height: inherit;
    white-space: pre;
}
pre[data-line] .line-highlight:before,
pre[data-line] .line-highlight[data-end]:after {
    content: attr(data-start);
    position: absolute;
    top: .4em;
    left: .6em;
    min-width: 1em;
    padding: 0.2em 0.5em;
    background-color: rgba(255, 255, 255, 0.4);
    color: black;
    font: bold 65%/1 sans-serif;
    height: 1em;
    line-height: 1em;
    text-align: center;
    border-radius: 999px;
    text-shadow: none;
    box-shadow: 0 1px 1px rgba(255, 255, 255, 0.7);
}
pre[data-line] .line-highlight[data-end]:after {
    content: attr(data-end);
    top: auto;
    bottom: .4em;
}
:not(pre) > code[class*=language-],
pre[class*=language-] {
  background: #101B25;
  font-size: 0.875rem;
}
code[class*=language-],
pre[class*=language-] {
  color: #F4F4F4;
}
/* Fonts */
/*
 * Main
 */
/* Variables */
/* Base */
* {
  box-sizing: border-box;
}
*:before,
*:after {
  box-sizing: border-box;
}
html,
body {
  font-size: 1rem;
}
body {
  font-family: 'Open Sans', sans-serif;
  color: #50647d;
  background-color: #fff;
  font-smoothing: antialiased;
}
a {
  color: #50647d;
}
hr {
  border: none;
  border-bottom: 1px #eef1f2 solid;
  margin: 50px auto;
}
@media (min-width: 768px) {
  hr {
    width: 60%;
  }
}
.container {
  max-width: 720px;
}
.animated-link,
ul.inline-nav a,
recent-work h2 a {
  text-decoration: none;
}
.animated-link:after,
ul.inline-nav a:after,
recent-work h2 a:after {
  content: '';
  display: block;
  border-bottom: 1px #50647d solid;
  text-decoration: none;
  width: 0;
  -webkit-transition: width .2s ease;
          transition: width .2s ease;
}
.animated-link:hover:after,
ul.inline-nav a:hover:after,
ul.inline-nav li.is-active a:after,
recent-work h2 a:hover:after {
  width: calc(97.5%);
}
/*
 * Headings
 * 
 */
h1 {
  font-size: 1.625rem;
}
h2 {
  font-size: 1.375rem;
}
h3 {
  font-size: 1.1875rem;
}
/*
 * Buttons
 * 
 */
.button {
  border: 1px #b4c1c6 solid;
  border-radius: 2px;
  color: #b4c1c6;
  display: block;
  font-size: 0.9375rem;
  padding: 22px 40px;
  text-transform: uppercase;
  -webkit-transition: all .2s ease;
          transition: all .2s ease;
}
.button:hover {
  border-color: #50647d;
  color: #50647d;
}
@media (min-width: 768px) {
  .button {
    display: inline-block;
  }
}
/*
 * Header
 * 
 */
.header {
  background: #4E637A;
  color: #ffffff;
  letter-spacing: 0.2em;
  padding-top: 30px;
  padding-bottom: 30px;
  text-align: center;
  min-height: 100vh;
  display: table;
  width: 100%;
}
@media (min-width: 768px) and (min-height: 530px) {
  .header {
    padding-top: 50px;
    padding-bottom: 60px;
    display: block;
    min-height: 0;
  }
}
.header > .container {
  display: table-cell;
  vertical-align: middle;
  height: 100%;
}
@media (min-width: 768px) and (min-height: 530px) {
  .header > .container {
    display: block;
  }
}
.header a {
  color: #ffffff;
}
.header h1 {
  margin: 0 0 20px 0;
  font-family: 'Open Sans Condensed', sans-serif;
  font-size: 1.8125rem;
  font-weight: 300;
  line-height: 180%;
  text-transform: uppercase;
}
.header h1 span {
  display: block;
  font-family: 'Open Sans', sans-serif;
  font-size: 3.0625rem;
  letter-spacing: 0.2em;
  text-transform: lowercase;
}
.header .inline-nav {
  margin-bottom: 80px;
}
.header .inline-nav a:after {
  border-bottom: 1px #ffffff solid;
  text-decoration: none;
}
@media (max-width: 300px) {
  .header .inline-nav {
    margin-bottom: 30px;
  }
  .header .inline-nav li {
    display: block;
    padding: 10px 0;
    margin: 0;
  }
}
.header p {
  font-size: 1.125rem;
  line-height: 180%;
  font-weight: 300;
}
ul.inline-nav {
  display: inline-block;
  list-style: none;
  padding: 0;
}
ul.inline-nav li {
  display: inline-block;
  margin: 0 15px;
}
ul.inline-nav li:first-child {
  margin-left: 0;
}
ul.inline-nav li:last-child {
  margin-right: 0;
}
ul.inline-nav a {
  display: inline-block;
  font-size: 0.75rem;
  letter-spacing: 0.2em;
  text-decoration: none;
  text-transform: lowercase;
}
/*
 * Main
 * 
 */
.main {
  padding-bottom: 80px;
}
.section-menu {
  text-align: center;
  margin-bottom: 100px;
  margin-top: 35px;
}
li.section-menu__item a {
  text-decoration: none;
  text-transform: uppercase;
}
/*
 * Posts
 * 
 */
.post,
.post-aside {
  visibility: hidden;
  opacity: 0;
  -webkit-transition: all .6s ease;
          transition: all .6s ease;
}
blog-posts.is-visible .post,
blog-posts.is-visible .post-aside {
  visibility: visible;
  opacity: 1;
}
.post h1,
recent-work h2 {
  margin: 0;
  padding: 0;
  font-size: 1.625rem;
  font-weight: 200;
  letter-spacing: 0.05em;
  text-align: center;
  text-transform: uppercase;
}
.post h2 {
  margin-top: 40px;
}
.post .post-meta {
  border-bottom: 1px #eef1f2 solid;
  color: #b4c1c6;
  font-size: 0.8125rem;
  letter-spacing: 0.1em;
  margin: 0 auto 50px auto;
  padding: 20px 0;
  text-align: center;
}
@media (min-width: 768px) {
  .post .post-meta {
    width: 60%;
  }
}
.post time {
  font-family: 'Open Sans Condensed', sans-serif;
}
.post p {
  line-height: 190%;
}
.post a {
  border-bottom: 1px #50647d solid;
  text-decoration: none;
}
.post-aside {
  letter-spacing: 0.1em;
  margin-top: 80px;
  text-align: center;
}
.post-aside h3 {
  text-transform: uppercase;
  font-family: 'Open Sans Condensed', sans-serif;
  font-size: 0.9375rem;
  font-weight: 300;
  margin: 3px 0 38px 0;
  padding: 0;
}
.post-aside ul {
  list-style: none;
  margin: 0;
  padding: 0;
  margin-left: -15px;
  margin-right: -15px;
}
.post-aside li {
  color: #b4c1c6;
  font-size: 0.8125rem;
  margin-bottom: 45px;
  position: relative;
  min-height: 1px;
  padding-left: 15px;
  padding-right: 15px;
}
@media (min-width: 768px) {
  .post-aside li {
    float: left;
    width: 33.33333333%;
  }
}
.post-aside li a {
  color: #b4c1c6;
  font-weight: 600;
  -webkit-transition: color .2s ease;
          transition: color .2s ease;
  text-decoration: none;
}
.post-aside li a:hover {
  color: #50647d;
}
.post-aside li time {
  display: block;
  font-family: 'Open Sans Condensed', sans-serif;
}
.post-aside li:nth-child(3n+1) {
  clear: both;
}
.post-aside li:first-child:last-child:first-of-type {
  width: 100%;
}
/*
 * Work
 * 
 */
recent-work.is-visible ul {
  visibility: visible;
  opacity: 1;
}
recent-work ul {
  list-style: none;
  margin: 0;
  padding: 0;
  visibility: hidden;
  opacity: 0;
  -webkit-transition: all .6s ease;
          transition: all .6s ease;
}
recent-work li {
  padding: 30px 0;
}
recent-work li:first-child {
  padding-top: 0;
}
recent-work li:last-child {
  padding-bottom: 0;
}
recent-work h2 {
  display: inline-block;
  margin: 0;
  letter-spacing: 0.12em;
  font-size: 1.35em;
}
recent-work h2 a:hover:after {
  width: calc(99%);
}
recent-work a {
  text-decoration: none;
}
.recent-work-content a {
  display: inline-block;
  border-bottom: 1px #50647d solid;
  text-decoration: none;
}
.recent-work-more {
  font-weight: 200;
  letter-spacing: 0.1em;
}
/*
 * Utilities
 * 
 */
.u-align-center,
.recent-work-more {
  text-align: center;
}
.u-text-large,
.recent-work-more {
  font-size: 1.5em;
}
.u-padding-top-large,
.recent-work-more {
  padding-top: 100px;
}
/*
 * Load fade in
 * 
 */

/*# sourceMappingURL=data:application/json;base64, */